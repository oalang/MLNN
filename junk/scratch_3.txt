Add unit test for different modes of opperation
Make functions composable for jax/jit
Output/input config dictionary

func v grad shared computation
base class
intr(self, X)
func(self, X, I=None, full_output=False)
grad(self, X, I=None, full_output=False)
_intr(X, params)
_func(X, I, params)
_grad(X, I, params)


kernel=None | None, 'rbf', 'linear'
regularization='auto' | 'auto', 'unweighted'
init='auto' | 'auto', 'random', 'zero', 'identity', 'centered', 'pca', 'kpca'
callback=None | None, f(MLNNEngine, MLNNOptimizer, iter)
solver='steepest_fixed_backtracking' | 'steepest'/'bfgs', 'fixed'/'alternating', 'backtracking'/'strong_wolfe'
backend='numpy' | 'numpy', 'jax', 'cupy', 'numba'
verbose=0 | 0, 1, 2
