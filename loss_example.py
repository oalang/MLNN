import numpy as np
import matplotlib.pyplot as plt
import loss


def zero_one(X):
    return np.where(X > 0, 1, 0)


def main():
    relu = loss.ReLU(6)
    smooth_relu = loss.SmoothReLU(5)
    smooth_relu_2 = loss.SmoothReLU2(4)
    smooth_relu_3 = loss.SmoothReLU3(3)
    quadratic = loss.Quadratic(2)
    logistic = loss.Logistic(1)
    sigmoid = loss.Sigmoid(0)
    leaky_relu = loss.LeakyReLU(6, .1)
    leaky_smooth_relu = loss.LeakySmoothReLU(5, .2)
    leaky_smooth_relu_2 = loss.LeakySmoothReLU2(4, .3)
    leaky_smooth_relu_3 = loss.LeakySmoothReLU3(3, .4)
    leaky_quadratic = loss.LeakyQuadratic(2, .5)
    leaky_logistic = loss.LeakyLogistic(1, .6)
    leaky_sigmoid = loss.LeakySigmoid(0, .7)

    x = np.linspace(-7, 1, 1024, endpoint=True)

    plt.figure(figsize=(16, 10))

    plt.subplot(221)
    plt.plot(x, relu.func(x), label='ReLU(6)')
    plt.plot(x, smooth_relu.func(x), label='SmoothReLU(5)')
    plt.plot(x, smooth_relu_2.func(x), label='SmoothReLU2(4)')
    plt.plot(x, smooth_relu_3.func(x), label='SmoothReLU3(3)')
    plt.plot(x, quadratic.func(x), label='Quadratic(2)')
    plt.plot(x, logistic.func(x), label='Logistic(1)')
    plt.plot(x, sigmoid.func(x), label='Sigmoid(0)')
    plt.plot(x, zero_one(x), label='ZeroOne')
    plt.title("loss functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-7, 1)
    plt.ylim(-1, 4)
    plt.grid()

    plt.subplot(223)
    plt.plot(x, relu.grad(x), label='ReLU(6)')
    plt.plot(x, smooth_relu.grad(x), label='SmoothReLU(5)')
    plt.plot(x, smooth_relu_2.grad(x), label='SmoothReLU2(4)')
    plt.plot(x, smooth_relu_3.grad(x), label='SmoothReLU3(3)')
    plt.plot(x, quadratic.grad(x), label='Quadratic(2)')
    plt.plot(x, logistic.grad(x), label='Logistic(1)')
    plt.plot(x, sigmoid.grad(x), label='Sigmoid(0)')
    plt.title("gradients functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-7, 1)
    plt.ylim(-1, 4)
    plt.grid()

    plt.subplot(222)
    plt.plot(x, leaky_relu.func(x), label='LeakyReLU(6, .1)')
    plt.plot(x, leaky_smooth_relu.func(x), label='LeakySmoothReLU(5, .2)')
    plt.plot(x, leaky_smooth_relu_2.func(x), label='LeakySmoothReLU2(4, .3)')
    plt.plot(x, leaky_smooth_relu_3.func(x), label='LeakySmoothReLU3(3, .4)')
    plt.plot(x, leaky_quadratic.func(x), label='LeakyQuadratic(2, .5)')
    plt.plot(x, leaky_logistic.func(x), label='LeakyLogistic(1, .6)')
    plt.plot(x, leaky_sigmoid.func(x), label='LeakySigmoid(0, .7)')
    plt.plot(x, zero_one(x), label='ZeroOne')
    plt.title("leaky loss functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-7, 1)
    plt.ylim(-1, 4)
    plt.grid()

    plt.subplot(224)
    plt.plot(x, leaky_relu.grad(x), label='LeakyReLU(6, .1)')
    plt.plot(x, leaky_smooth_relu.grad(x), label='LeakySmoothReLU(5, .2)')
    plt.plot(x, leaky_smooth_relu_2.grad(x), label='LeakySmoothReLU2(5, .3)')
    plt.plot(x, leaky_smooth_relu_3.grad(x), label='LeakySmoothReLU3(3, .4)')
    plt.plot(x, leaky_quadratic.grad(x), label='LeakyQuadratic(2, .5)')
    plt.plot(x, leaky_logistic.grad(x), label='LeakyLogistic(1, .6)')
    plt.plot(x, leaky_sigmoid.grad(x), label='LeakySigmoid(0, .7)')
    plt.title("leaky gradients functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-7, 1)
    plt.ylim(-1, 4)
    plt.grid()

    relu = loss.ReLU(1)
    smooth_relu = loss.SmoothReLU(1)
    smooth_relu_2 = loss.SmoothReLU2(1)
    smooth_relu_3 = loss.SmoothReLU3(1)
    quadratic = loss.Quadratic(1)
    logistic = loss.Logistic(1)
    sigmoid = loss.Sigmoid(0)

    x = np.linspace(-2, 1, 1024, endpoint=True)

    plt.figure(figsize=(8, 10))

    plt.subplot(211)
    plt.plot(x, relu.func(x), label='ReLU(1)')
    plt.plot(x, smooth_relu.func(x), label='SmoothReLU(1)')
    plt.plot(x, smooth_relu_2.func(x), label='SmoothReLU2(1)')
    plt.plot(x, smooth_relu_3.func(x), label='SmoothReLU3(1)')
    plt.plot(x, quadratic.func(x), label='Quadratic(1)')
    plt.plot(x, logistic.func(x), label='Logistic(1)')
    plt.plot(x, sigmoid.func(x), label='Sigmoid(0)')
    plt.plot(x, zero_one(x), label='ZeroOne')
    plt.title("loss functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-2, 1)
    plt.ylim(-.5, 1.5)
    plt.yticks([-.5, 0, .5, 1, 1.5])
    plt.grid()

    plt.subplot(212)
    plt.plot(x, relu.grad(x), label='ReLU(1)')
    plt.plot(x, smooth_relu.grad(x), label='SmoothReLU(1)')
    plt.plot(x, smooth_relu_2.grad(x), label='SmoothReLU2(1)')
    plt.plot(x, smooth_relu_3.grad(x), label='SmoothReLU3(1)')
    plt.plot(x, quadratic.grad(x), label='Quadratic(1)')
    plt.plot(x, logistic.grad(x), label='Logistic(1)')
    plt.plot(x, sigmoid.grad(x), label='Sigmoid(0)')
    plt.title("gradients functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-2, 1)
    plt.ylim(-.5, 1.5)
    plt.yticks([-.5, 0, .5, 1, 1.5])
    plt.grid()

    leaky_relu = loss.LeakyReLU(1, .25)
    leaky_smooth_relu = loss.LeakySmoothReLU(1, .25)
    leaky_smooth_relu_2 = loss.LeakySmoothReLU2(1, .25)
    leaky_smooth_relu_3 = loss.LeakySmoothReLU3(1, .25)
    leaky_quadratic = loss.LeakyQuadratic(1, .25)
    leaky_logistic = loss.LeakyLogistic(1, .25)
    leaky_sigmoid = loss.LeakySigmoid(0, .25)

    x = np.linspace(-2, 1, 1024, endpoint=True)

    plt.figure(figsize=(8, 10))

    plt.subplot(211)
    plt.plot(x, leaky_relu.func(x), label='LeakyReLU(1, .25)')
    plt.plot(x, leaky_smooth_relu.func(x), label='LeakySmoothReLU(1, .25)')
    plt.plot(x, leaky_smooth_relu_2.func(x), label='LeakySmoothReLU2(1, .25)')
    plt.plot(x, leaky_smooth_relu_3.func(x), label='LeakySmoothReLU3(1, .25)')
    plt.plot(x, leaky_quadratic.func(x), label='LeakyQuadratic(1, .25)')
    plt.plot(x, leaky_logistic.func(x), label='LeakyLogistic(1, .25)')
    plt.plot(x, leaky_sigmoid.func(x), label='LeakySigmoid(0, .25)')
    plt.plot(x, zero_one(x), label='ZeroOne')
    plt.title("loss functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-2, 1)
    plt.ylim(-.5, 1.5)
    plt.yticks([-.5, 0, .5, 1, 1.5])
    plt.grid()

    plt.subplot(212)
    plt.plot(x, leaky_relu.grad(x), label='ReLU(1, .25)')
    plt.plot(x, leaky_smooth_relu.grad(x), label='LeakySmoothReLU(1, .25)')
    plt.plot(x, leaky_smooth_relu_2.grad(x), label='LeakySmoothReLU2(1, .25)')
    plt.plot(x, leaky_smooth_relu_3.grad(x), label='LeakySmoothReLU3(1, .25)')
    plt.plot(x, leaky_quadratic.grad(x), label='LeakyQuadratic(1, .25)')
    plt.plot(x, leaky_logistic.grad(x), label='LeakyLogistic(1, .25)')
    plt.plot(x, leaky_sigmoid.grad(x), label='LeakySigmoid(0, .25)')
    plt.title("gradients functions w/ offset")
    plt.legend(loc='upper left')
    plt.xlim(-2, 1)
    plt.ylim(-.5, 1.5)
    plt.yticks([-.5, 0, .5, 1, 1.5])
    plt.grid()

    plt.show()


if __name__ == '__main__':
    main()
